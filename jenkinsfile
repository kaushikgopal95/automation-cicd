pipeline {
  agent any
  
  environment {
    STAGING_URL = 'https://stag-plantbot.netlify.app'
    PRODUCTION_URL = 'https://prod-plantbot.netlify.app/'
    BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    RECIPIENTS = 'kaushi.kutty@gmail.com' // Add your email here
  }
  
  options {
    timeout(time: 30, unit: 'MINUTES')
    retry(1)
    timestamps()
  }
  
  stages {
    // stage('Deploy to Staging') {
    //   steps {
    //     script {
    //       // Trigger Netlify deployment using the build hook
    //       bat 'curl -X POST -d {} "https://api.netlify.com/build_hooks/68b18e4052945d72b87627f4"'
          
    //       echo "Netlify staging deployment triggered"
    //     }
    //   }
    // }
    
    stage('Wait for Staging Deployment') {
      steps {
        script {
          // Wait for staging deployment to be ready
          bat "echo Waiting for staging deployment at %STAGING_URL%"
          bat "node scripts/wait-for-healthy.js %STAGING_URL% 300"
          
          // Additional verification
          bat "curl -I %STAGING_URL%"
          
          echo "Staging deployment completed and healthy"
        }
      }
    }
    
    stage('Run Cypress Tests on Staging') {
      steps {
        script {
          // Install dependencies first
          bat 'npm install'
          
          // Run Cypress tests against the live staging URL
          bat "set CYPRESS_BASE_URL=%STAGING_URL% && npx cypress run"
          
          // Debug: Check build status
          echo "Current build result: ${currentBuild.result}"
          echo "Build status: ${currentBuild.currentResult}"
        }
      }
      post {
        always {
          // Archive Cypress artifacts if they exist
          script {
            try {
              archiveArtifacts artifacts: 'cypress/videos/**/*,cypress/screenshots/**/*', allowEmptyArchive: true
            } catch (Exception e) {
              echo "No Cypress artifacts found to archive: ${e.getMessage()}"
            }
          }
        }
      }
    }
    
    stage('Promote to Main Branch') {
      steps {
        script {
          echo "Current build result: ${currentBuild.result}"
          echo "Current build status: ${currentBuild.currentResult}"
          
          // Check if tests passed by looking at the previous stage result
          if (currentBuild.result == 'SUCCESS' || currentBuild.currentResult == 'SUCCESS') {
            echo "Tests passed, proceeding with promotion to main branch"
            
            // Configure Git credentials
            withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
              // Set Git configuration
              bat 'git config --global user.email "%GIT_USERNAME%@github.com"'
              bat 'git config --global user.name "%GIT_USERNAME%"'
              
              // Checkout main branch and merge staging
              bat 'git checkout main'
              bat 'git pull origin main'
              bat 'git merge origin/staging || echo "Merge completed or no changes to merge"'
              bat 'git push origin main || echo "Push failed, checking status"'
              bat 'git status'
              
              echo "Successfully promoted staging branch to main"
            }
          } else {
            echo "Tests failed or build not successful, skipping promotion"
            currentBuild.result = 'FAILURE'
          }
        }
      }
    }
    
    stage('Wait for Production Deployment') {
      steps {
        script {
          echo "Current build result: ${currentBuild.result}"
          
          if (currentBuild.result == 'SUCCESS' || currentBuild.currentResult == 'SUCCESS') {
            echo "Proceeding with production deployment"
            
            // Trigger Netlify production deployment
            // bat 'curl -X POST -d {} "https://api.netlify.com/build_hooks/68b68850a4e373ee7b86e5fb"'
            
            // Wait for production deployment to be ready
            bat "node scripts/wait-for-healthy.js %PRODUCTION_URL% 300"
            
            echo "Production deployment completed and healthy"
          } else {
            echo "Skipping production deployment due to failed tests"
          }
        }
      }
      post {
        success {
          echo "Production deployment successful! Pipeline completed successfully."
        }
      }
    }
  }
  
  post {
    always {
      echo "Pipeline completed with status: ${currentBuild.result}"
    }
    
    success {
      emailext (
        subject: "Pipeline SUCCESS - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Completed Successfully!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: green;">SUCCESS</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Staging URL:</strong> <a href="${STAGING_URL}">${STAGING_URL}</a></p>
        <p><strong>Production URL:</strong> <a href="${PRODUCTION_URL}">${PRODUCTION_URL}</a></p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        
        <h3>What happened:</h3>
        <ul>
          <li>✅ Code deployed to staging</li>
          <li>✅ Cypress tests passed</li>
          <li>✅ Pull Request created for production deployment</li>
        </ul>
        
        <p><strong>Next Steps:</strong> Please review and merge the Pull Request to deploy to production.</p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
    
    failure {
      emailext (
        subject: "Pipeline FAILED - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Failed!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: red;">FAILED</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        
        <h3>Possible Issues:</h3>
        <ul>
          <li>❌ Cypress tests failed</li>
          <li>❌ Staging deployment failed</li>
          <li>❌ Health check timeout</li>
          <li>❌ Git operations failed</li>
        </ul>
        
        <p><strong>Action Required:</strong> Please check the build logs and fix the issues.</p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
    
    unstable {
      emailext (
        subject: "Pipeline UNSTABLE - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Unstable!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: orange;">UNSTABLE</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        
        <p><strong>Action Required:</strong> Please review the build logs for warnings or issues.</p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
  }
}