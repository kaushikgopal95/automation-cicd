pipeline {
  agent any
  
  environment {
    IMAGE_NAME = 'plantbot'
    STAGING_URL = 'http://localhost:3001'
    PRODUCTION_URL = 'http://localhost:3002'
    DOCKER_REGISTRY = 'docker.io'
    BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
  }
  
  options {
    timeout(time: 30, unit: 'MINUTES')
    retry(1)
    timestamps()
  }
  
  stages {
    stage('Build and Push Staging Image') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            // Build staging image
            bat "docker build --target staging -t %DOCKER_USERNAME%/%IMAGE_NAME%:staging ."
            
            // Login to Docker Hub
            bat "echo %DOCKER_PASSWORD% | docker login -u %DOCKER_USERNAME% --password-stdin"
            
            // Push to Docker Hub
            bat "docker push %DOCKER_USERNAME%/%IMAGE_NAME%:staging"
            
            echo "Staging image built and pushed to Docker Hub"
          }
        }
      }
    }
    
    stage('Deploy to Local Staging') {
      steps {
        script {
          // Start/update staging environment (Docker Compose handles conflicts automatically)
          bat "docker-compose -f docker-compose.staging.yml up -d"
          
          // Wait for staging to be healthy
          bat "node scripts/wait-for-healthy.js %STAGING_URL% 300"
          
          echo "Local staging deployment completed and healthy"
        }
      }
      post {
        failure {
          echo "Staging deployment failed - checking logs"
          bat "docker-compose -f docker-compose.staging.yml logs"
        }
      }
    }
    
    stage('Run Cypress Tests on Local Staging') {
      steps {
        script {
          // Run Cypress tests against the live local staging URL
          bat "set CYPRESS_BASE_URL=%STAGING_URL% && npx cypress run"
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'cypress/videos/**/*,cypress/screenshots/**/*'
        }
      }
    }
    
    stage('Promote to Main Branch') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          // Configure Git credentials
          withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            // Set Git configuration using existing credentials
            bat 'git config --global user.email "%GIT_USERNAME%@github.com"'
            bat 'git config --global user.name "%GIT_USERNAME%"'
            
            // Checkout main branch and merge staging
            bat 'git checkout main'
            bat 'git pull origin main'
            bat 'git merge origin/staging'
            bat 'git push origin main'
            
            echo "Successfully promoted staging branch to main"
          }
        }
      }
    }
    
    stage('Build and Push Production Image from Main') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            // Checkout main branch and build production image
            bat 'git checkout main'
            bat 'git pull origin main'
            bat "docker build --target production -t %DOCKER_USERNAME%/%IMAGE_NAME%:production ."
            
            // Push to Docker Hub
            bat "docker push %DOCKER_USERNAME%/%IMAGE_NAME%:production"
            
            echo "Production image built from main branch and pushed to Docker Hub"
          }
        }
      }
    }
    
    stage('Deploy to Local Production') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          // Start/update production environment (Docker Compose handles conflicts automatically)
          bat "docker-compose -f docker-compose.production.yml up -d"
          
          // Wait for production to be healthy
          bat "node scripts/wait-for-healthy.js %PRODUCTION_URL% 300"
          
          echo "Local production deployment completed and healthy"
        }
      }
      post {
        failure {
          echo "Production deployment failed - checking logs"
          bat "docker-compose -f docker-compose.production.yml logs"
        }
        success {
          echo "Production deployment successful! Pipeline completed successfully."
        }
      }
    }
  }
}