pipeline {
    agent any

    environment {
        STAGING_URL = 'https://stag-plantbot.netlify.app'
        PRODUCTION_URL = 'https://prod-plantbot.netlify.app/'
        BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
        RECIPIENTS = 'kaushik.gopal95@gmail.com'
        CYPRESS_STATS = ''
        CYPRESS_DASHBOARD_URL = ''
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        retry(1)
        timestamps()
    }

    stages {
        stage('Wait for Staging Deployment') {
            steps {
                bat "echo Waiting for staging deployment at %STAGING_URL%"
                bat "node scripts/wait-for-healthy.js %STAGING_URL% 60"
                bat "curl -I %STAGING_URL%"
                echo "Staging deployment completed and healthy"
            }
        }

        stage('Run Cypress Tests on Staging') {
            steps {
                withCredentials([string(credentialsId: 'cypress-record-key', variable: 'CYPRESS_RECORD_KEY')]) {
                    bat 'npm install'
                    script {
                        // Capture Cypress output to parse test results
                        def stagingUrl = env.STAGING_URL.trim()
                        def cypressOutput = bat(
                            script: "set CYPRESS_BASE_URL=${stagingUrl} && npx cypress run --record --key %CYPRESS_RECORD_KEY% --browser chrome",
                            returnStdout: true
                        ).trim()
                        
                        // Parse test statistics from output
                        def totalTests = 0
                        def passedTests = 0
                        def failedTests = 0
                        def dashboardUrl = ""
                        
                        cypressOutput.split('\n').each { line ->
                            // Look for test results pattern (e.g., "5 passing", "2 failing")
                            if (line.contains('passing')) {
                                def matcher = line =~ /(\d+)\s+passing/
                                if (matcher.find()) {
                                    passedTests = matcher[0][1] as Integer
                                }
                            }
                            if (line.contains('failing')) {
                                def matcher = line =~ /(\d+)\s+failing/
                                if (matcher.find()) {
                                    failedTests = matcher[0][1] as Integer
                                }
                            }
                            // Look for dashboard URL
                            if (line.contains('https://dashboard.cypress.io/projects/')) {
                                def matcher = line =~ /(https:\/\/dashboard\.cypress\.io\/projects\/[^\s]+)/
                                if (matcher.find()) {
                                    dashboardUrl = matcher[0][1]
                                }
                            }
                        }
                        
                        totalTests = passedTests + failedTests
                        
                        // Store results in environment variables
                        env.CYPRESS_STATS = "Total: ${totalTests} | Passed: ${passedTests} | Failed: ${failedTests}"
                        env.CYPRESS_DASHBOARD_URL = dashboardUrl ?: "Check Cypress Dashboard"
                        
                        echo "Cypress Test Results: ${env.CYPRESS_STATS}"
                        echo "Dashboard URL: ${env.CYPRESS_DASHBOARD_URL}"
                    }
                }
            }
            post {
                always {
                    script {
                        try {
                            archiveArtifacts artifacts: 'cypress/videos/**/*,cypress/screenshots/**/*,cypress/results/**/*', allowEmptyArchive: true
                        } catch (Exception e) {
                            echo "No Cypress artifacts found: ${e.getMessage()}"
                        }
                    }
                }
            }
        }

        stage('Create PR from Staging to Main') {
            when {
                expression { currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                withCredentials([string(credentialsId: 'github-credentials', variable: 'GITHUB_TOKEN')]) {
                    bat """curl -X POST -H "Authorization: token %GITHUB_TOKEN%" -d "{\\"title\\":\\"Auto PR: Merge Staging into Main\\",\\"head\\":\\"staging\\",\\"base\\":\\"main\\"}" https://api.github.com/repos/kaushikgopal95/automation-cicd/pulls"""
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed with status: ${currentBuild.currentResult}"
            echo "Email recipients: ${RECIPIENTS}"
            echo "Test Results: ${env.CYPRESS_STATS}"
        }

        success {
            script {
                try {
                    echo "Sending success email to: ${RECIPIENTS}"
                    emailext (
                        subject: "Pipeline SUCCESS - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                        Pipeline completed successfully!

                        üß™ CYPRESS TEST RESULTS:
                        ${env.CYPRESS_STATS}
                        
                        Staging deployment is done and Cypress tests passed.
                        PR has been created from staging ‚Üí main. Please review and merge:
                        https://github.com/kaushikgopal95/automation-cicd/pulls

                        üìä View Detailed Test Results: ${env.CYPRESS_DASHBOARD_URL}
                        üåê Staging URL: ${STAGING_URL}
                        """,
                        to: "${RECIPIENTS}"
                    )
                    echo "Success email sent"
                } catch (Exception e) {
                    echo "Failed to send success email: ${e.getMessage()}"
                }
            }
        }

        failure {
            script {
                try {
                    echo "Sending failure email to: ${RECIPIENTS}"
                    emailext (
                        subject: "Pipeline FAILED - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                        <h2>Pipeline Failed!</h2>
                        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
                        <p><strong>Status:</strong> <span style="color: red;">FAILED</span></p>
                        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>

                        <h3>Cypress Test Results</h3>
                        ${env.CYPRESS_TEST_TABLE}

                        <h3>Links</h3>
                        <p><strong>GitHub Repository:</strong> <a href="https://github.com/kaushikgopal95/automation-cicd">View Repository</a></p>

                        <p><strong>Action Required:</strong> Please check the test results and fix the failing tests.</p>
                        """,
                        to: "${RECIPIENTS}",
                        mimeType: 'text/html',
                        from: 'jenkins@automation-cicd.com'
                    )
                    echo "Failure email sent"
                } catch (Exception e) {
                    echo "Failed to send failure email: ${e.getMessage()}"
                }
            }
        }

        unstable {
            script {
                try {
                    echo "Sending unstable email to: ${RECIPIENTS}"
                    emailext (
                        subject: "Pipeline UNSTABLE - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                        <h2>Pipeline Unstable!</h2>
                        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
                        <p><strong>Status:</strong> <span style="color: orange;">UNSTABLE</span></p>
                        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>

                        <h3>üß™ Cypress Test Results</h3>
                        <p><strong>Results:</strong> ${env.CYPRESS_STATS}</p>
                        <p><strong>Dashboard:</strong> <a href="${env.CYPRESS_DASHBOARD_URL}">View Detailed Results</a></p>

                        <h3>Links</h3>
                        <p><strong>GitHub Repository:</strong> <a href="https://github.com/kaushikgopal95/automation-cicd">View Repository</a></p>

                        <p><strong>Action Required:</strong> Please review the test results for any issues.</p>
                        """,
                        to: "${RECIPIENTS}",
                        mimeType: 'text/html',
                        from: 'jenkins@automation-cicd.com'
                    )
                    echo "Unstable email sent"
                } catch (Exception e) {
                    echo "Failed to send unstable email: ${e.getMessage()}"
                }
            }
        }
    }
}