pipeline {
  agent any
  
  environment {
    STAGING_URL = 'https://stag-plantbot.netlify.app'
    PRODUCTION_URL = 'https://prod-plantbot.netlify.app/'
    BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
    RECIPIENTS = 'kaushi.kutty@gmail.com'
  }
  
  options {
    timeout(time: 30, unit: 'MINUTES')
    retry(1)
    timestamps()
  }
  
  stages {
    // stage('Deploy to Staging') {
    //   steps {
    //     bat 'curl -X POST -d {} "https://api.netlify.com/build_hooks/68b18e4052945d72b87627f4"'
    //     echo "Netlify staging deployment triggered"
    //   }
    // }
    
    stage('Wait for Staging Deployment') {
      steps {
        bat "echo Waiting for staging deployment at %STAGING_URL%"
        bat "node scripts/wait-for-healthy.js %STAGING_URL% 60"
        bat "curl -I %STAGING_URL%"
        echo "Staging deployment completed and healthy"
      }
    }
    
    stage('Run Cypress Tests on Staging') {
      steps {
        bat 'npm install'
        bat "set CYPRESS_BASE_URL=%STAGING_URL% && npx cypress run"
        echo "Build status after Cypress: ${currentBuild.currentResult}"
      }
      post {
        always {
          script {
            try {
              archiveArtifacts artifacts: 'cypress/videos/**/*,cypress/screenshots/**/*', allowEmptyArchive: true
            } catch (Exception e) {
              echo "No Cypress artifacts found: ${e.getMessage()}"
            }
          }
        }
      }
    }
    
    stage('Promote to Main Branch') {
      when {
        expression { currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        echo "Tests passed, promoting staging to main branch"
        
        withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_TOKEN')]) {
          bat 'echo "=== Using HTTPS with PAT to merge staging to main ==="'
          
          bat '''
            git config user.name "kaushikgopal95"
            git config user.email "kaushikgopal95@users.noreply.github.com"

            REM Disable interactive prompts
            git config --global credential.helper ""
            set GIT_ASKPASS=echo

            REM Set remote URL with credentials (use x-access-token format)
            git remote set-url origin https://x-access-token:%GIT_TOKEN%@github.com/kaushikgopal95/automation-cicd.git

            REM Git operations
            git fetch origin main
            git checkout main
            
            REM Handle diverged histories - rebase first, then force push if needed
            git pull origin main --rebase || echo "Rebase skipped - proceeding with merge"
            git merge origin/staging --no-edit
            git status
            
            REM Force push to overwrite remote with merged result
            git push origin main --force || echo "Push failed - checking status"
            git status
          '''
        }
        
        echo "Successfully promoted staging branch to main"
      }
    }
    
    stage('Wait for Production Deployment') {
      when {
        expression { currentBuild.currentResult == 'SUCCESS' }
      }
      steps {
        echo "Proceeding with production deployment"
        bat 'echo "Main branch updated - Netlify will auto-deploy to production"'
        bat "node scripts/wait-for-healthy.js %PRODUCTION_URL% 300"
        echo "Production deployment completed and healthy"
      }
      post {
        success {
          echo "Production deployment successful! Pipeline completed successfully."
        }
      }
    }
  }
  
  post {
    always {
      echo "Pipeline completed with status: ${currentBuild.currentResult}"
    }
    
    success {
      emailext (
        subject: "Pipeline SUCCESS - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Completed Successfully!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: green;">SUCCESS</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Staging URL:</strong> <a href="${STAGING_URL}">${STAGING_URL}</a></p>
        <p><strong>Production URL:</strong> <a href="${PRODUCTION_URL}">${PRODUCTION_URL}</a></p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        <p><strong>GitHub Repository:</strong> <a href="https://github.com/kaushikgopal95/automation-cicd">View Repository</a></p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
    
    failure {
      emailext (
        subject: "Pipeline FAILED - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Failed!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: red;">FAILED</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        
        <h3>Possible Issues:</h3>
        <ul>
          <li>❌ Cypress tests failed</li>
          <li>❌ Staging deployment failed</li>
          <li>❌ Health check timeout</li>
          <li>❌ Git operations failed</li>
        </ul>
        
        <p><strong>Action Required:</strong> Please check the build logs and fix the issues.</p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
    
    unstable {
      emailext (
        subject: "Pipeline UNSTABLE - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
        body: """
        <h2>Pipeline Unstable!</h2>
        <p><strong>Project:</strong> ${env.JOB_NAME}</p>
        <p><strong>Build Number:</strong> #${env.BUILD_NUMBER}</p>
        <p><strong>Status:</strong> <span style="color: orange;">UNSTABLE</span></p>
        <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
        <p><strong>Build Console:</strong> <a href="${env.BUILD_URL}">View Build Logs</a></p>
        
        <p><strong>Action Required:</strong> Please review the build logs for warnings or issues.</p>
        """,
        to: "${RECIPIENTS}",
        mimeType: 'text/html'
      )
    }
  }
}
