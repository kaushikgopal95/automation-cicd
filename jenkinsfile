pipeline {
  agent any
  
  environment {
    IMAGE_NAME = 'plantbot'
    STAGING_URL = 'http://localhost:3001'
    PRODUCTION_URL = 'http://localhost:3002'
    DOCKER_REGISTRY = 'docker.io'
    BUILD_TIMESTAMP = "${new Date().format('yyyyMMdd-HHmmss')}"
  }
  
  options {
    timeout(time: 30, unit: 'MINUTES')
    retry(1)
    timestamps()
  }
  
  stages {
    stage('Build and Push Staging Image') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            // Build staging image
            sh "docker build --target staging -t ${DOCKER_USERNAME}/${IMAGE_NAME}:staging ."
            
            // Login to Docker Hub
            sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
            
            // Push to Docker Hub
            sh "docker push ${DOCKER_USERNAME}/${IMAGE_NAME}:staging"
            
            echo "Staging image built and pushed to Docker Hub"
          }
        }
      }
    }
    
    stage('Deploy to Local Staging') {
      steps {
        script {
          // Stop and remove existing staging containers
          sh "docker-compose -f docker-compose.staging.yml down || true"
          
          // Start new staging environment
          sh "docker-compose -f docker-compose.staging.yml up -d"
          
          // Wait for staging to be healthy
          sh "node scripts/wait-for-healthy.js ${STAGING_URL} 300"
          
          echo "Local staging deployment completed and healthy"
        }
      }
      post {
        failure {
          echo "Staging deployment failed - checking logs"
          sh "docker-compose -f docker-compose.staging.yml logs"
        }
      }
    }
    
    stage('Run Cypress Tests on Local Staging') {
      steps {
        script {
          // Run Cypress tests against the live local staging URL
          sh "CYPRESS_BASE_URL=${STAGING_URL} npx cypress run"
        }
      }
      post {
        always {
          archiveArtifacts artifacts: 'cypress/videos/**/*,cypress/screenshots/**/*'
        }
      }
    }
    
    stage('Promote to Main Branch') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          // Configure Git credentials
          withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            // Set Git configuration
            sh 'git config --global user.email "jenkins@example.com"'
            sh 'git config --global user.name "Jenkins Pipeline"'
            
            // Checkout main branch and merge staging
            sh 'git checkout main'
            sh 'git pull origin main'
            sh 'git merge origin/staging'
            sh 'git push origin main'
            
            echo "Successfully promoted staging branch to main"
          }
        }
      }
    }
    
    stage('Build and Push Production Image from Main') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
            // Checkout main branch and build production image
            sh 'git checkout main'
            sh 'git pull origin main'
            sh "docker build --target production -t ${DOCKER_USERNAME}/${IMAGE_NAME}:production ."
            
            // Push to Docker Hub
            sh "docker push ${DOCKER_USERNAME}/${IMAGE_NAME}:production"
            
            echo "Production image built from main branch and pushed to Docker Hub"
          }
        }
      }
    }
    
    stage('Deploy to Local Production') {
      when {
        expression { currentBuild.result == 'SUCCESS' }
      }
      steps {
        script {
          // Stop and remove existing production containers
          sh "docker-compose -f docker-compose.production.yml down || true"
          
          // Start new production environment
          sh "docker-compose -f docker-compose.production.yml up -d"
          
          // Wait for production to be healthy
          sh "node scripts/wait-for-healthy.js ${PRODUCTION_URL} 300"
          
          echo "Local production deployment completed and healthy"
        }
      }
      post {
        failure {
          echo "Production deployment failed - checking logs"
          sh "docker-compose -f docker-compose.production.yml logs"
        }
        success {
          echo "Production deployment successful! Pipeline completed successfully."
        }
      }
    }
  }
}